generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

model User {
    id        String    @id @default(auto()) @map("_id") @db.ObjectId
    user      String    @unique
    password  String
    fullname  String
    createdAt DateTime  @default(now())
    lastLogin String?
    roles     String[]  @default(["staff"])
    token     String?
    mail      Mail?
    resigned  Resigned?
    avatar    Avatar?
    OTP       OTP?
}

model Mail {
    id       String  @id @default(auto()) @map("_id") @db.ObjectId
    email    String  @unique
    verified Boolean @default(false)
    user     User    @relation(fields: [userId], references: [id])
    userId   String  @unique @db.ObjectId
}

model Resigned {
    id     String  @id @default(auto()) @map("_id") @db.ObjectId
    date   String
    resign Boolean @default(false)
    user   User    @relation(fields: [userId], references: [id])
    userId String  @unique @db.ObjectId
}

model Avatar {
    id         String @id @default(auto()) @map("_id") @db.ObjectId
    secure_url String
    public_url String
    user       User   @relation(fields: [userId], references: [id])
    userId     String @unique @db.ObjectId
}

model OTP {
    id       String @id @default(auto()) @map("_id") @db.ObjectId
    totp     String
    totpDate String
    user     User   @relation(fields: [userId], references: [id])
    userId   String @unique @db.ObjectId
}

model Patient {
    id             String          @id @default(auto()) @map("_id") @db.ObjectId
    card_no        String          @unique
    fullname       String
    age            Int
    sex            String
    date           String          @default("")
    phone_no       String?
    address        String?
    death          Death?
    body           Body[]
    recommendation Recommendation?
}

model Death {
    id        String  @id @default(auto()) @map("_id") @db.ObjectId
    date      String?
    dead      Boolean @default(false)
    patient   Patient @relation(fields: [patientId], references: [id])
    patientId String  @unique @db.ObjectId
}

model Body {
    id        String      @id @default(auto()) @map("_id") @db.ObjectId
    idx       String
    date      String
    next_app  String?
    diagnosis Diagnosis[]
    patient   Patient     @relation(fields: [patientId], references: [id])
    patientId String      @unique @db.ObjectId
}

model Diagnosis {
    id     String   @id @default(auto()) @map("_id") @db.ObjectId
    texts  String?
    images Images[]
    body   Body     @relation(fields: [bodyId], references: [id])
    bodyId String   @unique @db.ObjectId
}

model Images {
    id          String    @id @default(auto()) @map("_id") @db.ObjectId
    secure_url  String?
    public_url  String?
    diagnosis   Diagnosis @relation(fields: [diagnosisId], references: [id])
    diagnosisId String    @unique @db.ObjectId
}

model Recommendation {
    id            String          @id @default(auto()) @map("_id") @db.ObjectId
    extensions    Extensions[]
    opthamology   Opthalmology[]
    physiotherapy Physiotherapy[]
    patient       Patient         @relation(fields: [patientId], references: [id])
    patientId     String          @unique @db.ObjectId
}

model Opthalmology {
    id               String          @id @default(auto()) @map("_id") @db.ObjectId
    idx              String
    date             String
    next_app         String?
    Recommendation   Recommendation? @relation(fields: [recommendationId], references: [id])
    recommendationId String?         @db.ObjectId
}

model Physiotherapy {
    id               String          @id @default(auto()) @map("_id") @db.ObjectId
    idx              String
    date             String
    next_app         String?
    Recommendation   Recommendation? @relation(fields: [recommendationId], references: [id])
    recommendationId String?         @db.ObjectId
}

model Extensions {
    id               String         @id @default(auto()) @map("_id") @db.ObjectId
    idx              String?
    date             String?
    name             String?
    given            Boolean?
    occurence        Int
    recommendation   Recommendation @relation(fields: [recommendationId], references: [id])
    recommendationId String         @unique @db.ObjectId
}
