generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

model User {
    id             String    @id @default(auto()) @map("_id") @db.ObjectId
    user           String    @unique
    password       String
    fullname       String
    email          String    @unique
    email_verified Boolean   @default(false)
    createdAt      DateTime  @default(now())
    lastLogin      String?
    roles          String[]  @default(["staff"])
    token          String?   @unique
    totp           String?
    totp_date      Int?
    avatar         Avatar?
    resigned       Resigned?
}

model Patient {
    id             String          @id @default(auto()) @map("_id") @db.ObjectId
    card_no        String          @unique
    fullname       String
    age            Int
    sex            Sex
    date           String          @default("")
    phone_no       String?
    address        String?
    death          Death?
    body           Body[]
    recommendation Recommendation?
}

enum Sex {
    Male
    Female
}

model Resigned {
    id     String   @id @default(auto()) @map("_id") @db.ObjectId
    date   String?
    resign Boolean? @default(false)
    user   User     @relation(fields: [userId], references: [id])
    userId String   @unique @db.ObjectId
}

model Avatar {
    id         String @id @default(auto()) @map("_id") @db.ObjectId
    secure_url String @default("")
    public_id  String @default("")
    user       User   @relation(fields: [userId], references: [id])
    userId     String @unique @db.ObjectId
}

model Death {
    id        String  @id @default(auto()) @map("_id") @db.ObjectId
    date      String?
    dead      Boolean @default(false)
    patient   Patient @relation(fields: [patientId], references: [id])
    patientId String  @unique @db.ObjectId
}

model Body {
    id        String     @id @default(auto()) @map("_id") @db.ObjectId
    idx       String
    date      String
    next_app  String?
    diagnosis Diagnosis?
    patient   Patient    @relation(fields: [patientId], references: [id])
    patientId String     @unique @db.ObjectId
}

model Diagnosis {
    id     String   @id @default(auto()) @map("_id") @db.ObjectId
    texts  String?
    images Images[]
    body   Body     @relation(fields: [bodyId], references: [id])
    bodyId String   @unique @db.ObjectId
}

model Images {
    id          String    @id @default(auto()) @map("_id") @db.ObjectId
    secure_url  String?
    public_id   String?
    diagnosis   Diagnosis @relation(fields: [diagnosisId], references: [id])
    diagnosisId String    @unique @db.ObjectId
}

model Recommendation {
    id              String         @id @default(auto()) @map("_id") @db.ObjectId
    extensions      Extensions[]
    patient         Patient        @relation(fields: [patientId], references: [id])
    opthalmology    Opthalmology?  @relation(fields: [opthalmologyId], references: [id])
    physiotherapy   Physiotherapy? @relation(fields: [physiotherapyId], references: [id])
    patientId       String         @unique @db.ObjectId
    opthalmologyId  String?        @unique @db.ObjectId
    physiotherapyId String?        @unique @db.ObjectId
}

model Medication {
    id              String         @id @default(auto()) @map("_id") @db.ObjectId
    idx             String
    date            String
    next_app        String?
    opthalmology    Opthalmology?  @relation(fields: [opthalmologyId], references: [id])
    opthalmologyId  String         @unique @db.ObjectId
    physiotherapy   Physiotherapy? @relation(fields: [physiotherapyId], references: [id])
    physiotherapyId String         @unique @db.ObjectId
}

model Opthalmology {
    id             String           @id @default(auto()) @map("_id") @db.ObjectId
    eligible       Boolean
    medication     Medication[]
    Recommendation Recommendation[]
}

model Physiotherapy {
    id             String           @id @default(auto()) @map("_id") @db.ObjectId
    eligible       Boolean
    medication     Medication[]
    Recommendation Recommendation[]
}

model Extensions {
    id               String         @id @default(auto()) @map("_id") @db.ObjectId
    idx              String
    date             String
    name             String
    given            Boolean?
    occurence        Int?
    recommendation   Recommendation @relation(fields: [recommendationId], references: [id])
    recommendationId String         @unique @db.ObjectId
}
